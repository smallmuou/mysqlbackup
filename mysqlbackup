#!/bin/bash
#
# Copyright (C) 2018 smallmuou <smallmuou@163.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

set -e

spushd() {
     pushd "$1" 2>&1> /dev/null
}

spopd() {
     popd 2>&1> /dev/null
}

info() {
     local green="\033[1;32m"
     local normal="\033[0m"
     echo -e "[${green}INFO${normal}] $1"
}

cmdcheck() {
    command -v $1>/dev/null 2>&1 || { error >&2 "Please install command $1 first."; exit 1; }   
}

error() {
     local red="\033[1;31m"
     local normal="\033[0m"
     echo -e "[${red}ERROR${normal}] $1"
}

warn() {
     local yellow="\033[1;33m"
     local normal="\033[0m"
     echo -e "[${yellow}WARNING${normal}] $1"
}

yesno() {
    while true;do
    read -p "$1 (y/n)" yn
    case $yn in
        [Yy]) $2;break;;
        [Nn]) exit;;
        *) echo 'please enter y or n.'
    esac
done
}

curdir() {
    if [ ${0:0:1} = '/' ] || [ ${0:0:1} = '~' ]; then
        echo "$(dirname $0)"
    elif [ -L $0 ];then
        name=`readlink $0`
        echo $(dirname $name)
    else
        echo "`pwd`/$(dirname $0)"
    fi
}

myos() {
    echo `uname|tr "[:upper:]" "[:lower:]"`
}

#########################################
###           GROBLE DEFINE           ###
#########################################

VERSION=1.0.0
AUTHOR=smallmuou

#########################################
###             ARG PARSER            ###
#########################################

usage() {
prog=`basename $0`
cat << EOF
$prog version $VERSION by $AUTHOR

USAGE: $prog [OPTIONS] target_dir [keep_count]

DESCRIPTION:

mysqlbackup -  the MySQL backup tool

target_dir is the directory that backup data location. keep_count is the number copies keep, the minimum is 1, default is 3.

OPTIONS:
    -h  host name, default is localhost.
    -u  user,  default is root.
    -p  password, default is empty.
    -P  port, default is 3306.

EXAMPLES:
    $prog -u root -p test /srv/backups 3
    $prog -h 192.168.1.100 -P 3306 -u root -p test /srv/backups 3    

EOF
exit 1
}

host="localhost"
port=3306
user="root"
password=""
target_dir='.'
keep_count=3

while getopts 'h:u:p:P:' arg; do
    case $arg in
        h)
            host=$OPTARG
            ;;
        u)
            user=$OPTARG
            ;;
        p)
            password=$OPTARG
            ;;
        P)
            port=$OPTARG
            ;;
        ?)
            # OPTARG
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))

[ $# -lt 1 ] && usage
[ $# -ge 1 ] && target_dir=$1
[ $# -ge 2 ] && keep_count=$2

[ -n "`echo $keep_count|sed 's/[0-9]//g'`" ] && { error "keep_count $keep_count is non-numeric"; exit 1; }
[ $keep_count -lt 1 ] && keep_count=1

#########################################
###            MAIN ENTRY             ###
#########################################

cmdcheck mysql
cmdcheck mysqldump
cmdcheck gzip


if [ ! -d $target_dir ];then 
    info "create target directory ..."
    mkdir -p $target_dir
fi

spushd $target_dir

export MYSQL_PWD=${password} 
MYSQL="mysql -P ${port} -h ${host} -u${user}"
MYSQLDUMP="mysqldump -P ${port} -h ${host} -u${user}"
current_date=`date "+%Y%m%d"`

databases=`$MYSQL -e 'show databases;'|sed '1d'|sed '/information_schema/d'|sed '/performance_schema/d'`

sql_files=

for database in $databases
do
    info "backup $database ..."
    filename=${database}-${current_date}.sql.gz
    `$MYSQLDUMP ${database} | gzip > ${database}-${current_date}.sql.gz`
    sql_files="$sql_files $filename"
done

if [ -n "$sql_files" ];then

    tar_file="mysqldb-$current_date.tar"

    info "tar to $tar_file ..."
    tar cvf $tar_file $sql_files
    rm -rf $sql_files

    info "cleanup history backups(keep $keep_count copies) ..."
    sed_index=`expr $keep_count + 1`
    ls -r mysqldb-*|sed -n "$sed_index,$ p"|xargs rm -f
    info "successfully. backup to $target_dir/$tar_file"
fi

spopd


